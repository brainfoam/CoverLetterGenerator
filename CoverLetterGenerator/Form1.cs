using System;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using iTextSharp;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Diagnostics;
using static iTextSharp.text.Font;

namespace CoverLetterGenerator
{
    public partial class CoverLetterGenerator : Form
    {
        private const string CFG_NAME    = "properties";
        private const string LETTER_NAME = "letter";
        private string path;

        public CoverLetterGenerator()
        {
            InitializeComponent();
            Init();
        }

        private void Init()
        {
            path = "";
            this.Opacity = 0.0f;
            tf_path.Text = GetCFGDirectory(true);
            CheckLetter();
            CheckCFG();
            CenterToScreen();
            FadeIn(this, 20);
        }

        private async void FadeIn(Form o, int interval = 80)
        {
            while (o.Opacity < 1.0)
            {
                await Task.Delay(interval);
                o.Opacity += 0.05;
            }
            o.Opacity = 1;
        }

        private bool CheckPrereqs()
        {
            return
                tf_companyName.Text != "" &&
                tf_jobPosition.Text != "" &&
                tf_path.Text != "";
        }

        private string GetCFGDirectory(bool withoutAppend = false)
        {
            string directory = System.IO.Directory.GetCurrentDirectory();
            return (withoutAppend) ? directory : directory + "\\" + CFG_NAME + ".cfg";
        }

        private string GetLetterDirectory(bool withoutAppend = false)
        {
            string directory = System.IO.Directory.GetCurrentDirectory();
            return (withoutAppend) ? directory : directory + "\\" + LETTER_NAME + ".txt";
        }

        private void CheckCFG()
        {
            string directory = GetCFGDirectory(true);
            if (directory != null || directory != "")
            {
                directory = GetCFGDirectory();
                if (!File.Exists(directory))
                {
                    MessageBox.Show("No config file detected. Creating \"" + CFG_NAME + ".cfg\" in the current directory.", "No config file found!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    CreateDefaultCFG();
                }
            }
            SetCFGFields();
        }

        private void CheckLetter()
        {
            string directory = GetLetterDirectory(true);
            if (directory != null || directory != "")
            {
                directory = GetLetterDirectory();
                if (!File.Exists(directory))
                {
                    MessageBox.Show("No letter file detected. Creating \"" + LETTER_NAME + ".txt\" in the current directory.", "No config file found!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    CreateDefaultLetter();
                }
            }
        }

        private void CreateDefaultCFG()
        {
            using (StreamWriter sw = new StreamWriter(GetCFGDirectory(), true))
            {
                sw.WriteLine("name:" + "Default");
                sw.WriteLine("addressl1:" + "123 Maple St");
                sw.WriteLine("addressl2:" + "Town, State, 12345");
                sw.WriteLine("phone:" + "123-456-7890");
                sw.WriteLine("email:" + "person@website.com");
                sw.WriteLine("intro:" + "Good Day");
                sw.WriteLine("outro:" + "Sincerely");
                sw.Close();
            }   
        }

        private void CreateDefaultLetter()
        {
            using (StreamWriter sw = new StreamWriter(GetLetterDirectory(), true))
            {
                sw.WriteLine("This is an example letter! Company Name: $C, Position: $P");
                sw.WriteLine("New lines signify new paragraphs.");
                sw.WriteLine("Generated by Cover Letter Generator.");
                sw.Close();
            }
        }

        private void SetCFGFields()
        {
            string directory = GetCFGDirectory();
            int lineNumber = 0;
            using (StreamReader sf = File.OpenText(directory))
            {
                string s = "";
                while ((s = sf.ReadLine()) != null)
                {
                    int colonIndex = s.IndexOf(":");
                    if (colonIndex != -1)
                    {
                        string info = s.Substring(colonIndex + 1, s.Length - colonIndex - 1);
                        switch (lineNumber++)
                        {
                            case (0): tf_name.Text        = info; break;
                            case (1): tf_address.Text     = info; break;
                            case (2): tf_addressCont.Text = info; break;
                            case (3): tf_phone.Text       = info; break;
                            case (4): tf_email.Text       = info; break;
                            case (5): tf_intro.Text       = info; break;
                            case (6): tf_outro.Text       = info; break;
                        }
                        if (lineNumber > 6)
                            break;
                    }
                    else
                    {
                        MessageBox.Show("Error reading config file.", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void GenerateCoverLetter()
        {
            if (CheckPrereqs())
            {
                string pdfPath = tf_path.Text + "\\" + tf_companyName.Text + ".pdf";
                FileStream fs = new FileStream(pdfPath, FileMode.Create);
                Document doc = new Document(PageSize.A4, 25, 25, 30, 30);
                PdfWriter writer = PdfWriter.GetInstance(doc, fs);
                Font fnt_times = new Font(FontFamily.TIMES_ROMAN, tb_fontSize.Value);

                doc.AddAuthor(tf_name.Text);
                doc.AddCreator(tf_name.Text);
                doc.AddKeywords("Cover Letter");
                doc.AddSubject("Cover Letter");
                doc.AddTitle(tf_jobPosition.Text + " Cover Letter for " + tf_companyName);

                doc.SetMargins(tb_margins.Value, tb_margins.Value, tb_margins.Value, tb_margins.Value);

                doc.Open();

                //Opener
                Paragraph opener = new Paragraph
                (
                    tf_name.Text + "\n" +
                    tf_address.Text + "\n" +
                    tf_addressCont.Text + "\n" +
                    tf_phone.Text + "\n" +
                    tf_email.Text + "\n\n" +
                    dp_datePicker.Value.ToString("MM/dd/yy") + "\n\n" +
                    tf_companyName.Text + "\n\n",
                    fnt_times
                );
                doc.Add(opener);

                //Intro
                Paragraph intro = new Paragraph
                (
                    tf_intro.Text + ",\n\n",
                    fnt_times
                );
                doc.Add(intro);

                //Letter
                using (StreamReader sf = File.OpenText(GetLetterDirectory()))
                {
                    string s = "";
                    while ((s = sf.ReadLine()) != null)
                    {
                        s = s.Replace("$C", tf_companyName.Text);
                        s = s.Replace("$P", tf_jobPosition.Text);
                        Paragraph p = new Paragraph
                        (
                            s + "\n\n",
                            fnt_times
                        );
                        p.FirstLineIndent = tb_firstLineIndent.Value;
                        doc.Add(p);
                    }
                }

                //Outro
                Paragraph outro = new Paragraph
                (
                    tf_outro.Text + ",\n\n",
                    fnt_times
                );
                doc.Add(outro);

                //Name
                Paragraph name = new Paragraph
                (
                    tf_name.Text,
                    fnt_times
                );
                doc.Add(name);

                doc.Close();
                writer.Close();
                fs.Close();

                MessageBox.Show("Cover letter generated.", "Success!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                if (cb_openAfter.Checked)
                    System.Diagnostics.Process.Start(pdfPath);
            }
            else
            {
                string missing = "\n\nMissing:";
                if (tf_companyName.Text == "")
                    missing += "\nCompany Name";
                if (tf_jobPosition.Text == "")
                    missing += "\nPosition";
                if (tf_path.Text == "")
                    missing += "\nPath";

                MessageBox.Show("Cannot generate a cover letter with missing header fields!" + missing, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void SaveCFG()
        {
            string[] arrLine = File.ReadAllLines(GetCFGDirectory());
            arrLine[0] = "name:" + tf_name.Text;
            arrLine[1] = "addressl1:" + tf_address.Text;
            arrLine[2] = "addressl2:" + tf_addressCont.Text;
            arrLine[3] = "phone:" + tf_phone.Text;
            arrLine[4] = "email:" + tf_email.Text;
            arrLine[5] = "intro:" + tf_intro.Text;
            arrLine[6] = "outro:" + tf_outro.Text;
            File.WriteAllLines(GetCFGDirectory(), arrLine);
            MessageBox.Show("Config file overwritten.", "Success!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }

        private void ClearConfigFields()
        {
            tf_name.Text = "";
            tf_address.Text = "";
            tf_addressCont.Text = "";
            tf_phone.Text = "";
            tf_email.Text = "";
            tf_intro.Text = "";
            tf_outro.Text = "";
        }

        private void ClearCompanyFields()
        {
            tf_companyName.Text = "";
            tf_jobPosition.Text = "";
            tf_path.Text = "";
        }

        #region Event Actions

        private void bt_generate_Click(object sender, EventArgs e)
        {
            GenerateCoverLetter();
        }

        private void bt_choosePath_Click(object sender, EventArgs e)
        {
            DialogResult result = di_pathBrowser.ShowDialog();
            if (result == DialogResult.OK)
            {
                path = di_pathBrowser.SelectedPath;
                tf_path.Text = path;
            }
        }

        private void bt_editFile_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start(GetCFGDirectory());
        }

        private void bt_editLetter_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start(GetLetterDirectory());
        }

        private void bt_saveConfig_Click(object sender, EventArgs e)
        {
            SaveCFG();
        }

        private void saveConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveCFG();
        }

        private void generateFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            GenerateCoverLetter();
        }

        private void clearConfigFieldsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ClearConfigFields();
        }

        private void clearCompanyFieldsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ClearCompanyFields();
        }

        private void lb_githubLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            ProcessStartInfo sInfo = new ProcessStartInfo("https://github.com/brainfoam");
            Process.Start(sInfo);
        }

        private void lb_websiteLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            ProcessStartInfo sInfo = new ProcessStartInfo("http://joeaquiare.com/");
            Process.Start(sInfo);
        }

        private void lb_twitterLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            ProcessStartInfo sInfo = new ProcessStartInfo("https://twitter.com/brainfoam_");
            Process.Start(sInfo);
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        #endregion
    }
}
